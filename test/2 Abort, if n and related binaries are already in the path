#!/usr/bin/env bash

# ---
# IMPORTANT: Use the following statement at the TOP OF EVERY TEST SCRIPT
#            to ensure that this package's 'bin/' subfolder is added to the path so that
#            this package's CLIs can be invoked by their mere filename in the rest
#            of the script.
# ---
PATH=${PWD%%/test*}/bin:$PATH
# Here we do NOT want to skip the check for an existing n / npm / node installation 
export N_INSTALL_TEST_OVERRIDE_SKIP_EXISTING_INSTALLATION_TEST=0

# Helper function for error reporting.
die() { (( $# > 0 )) && echo "ERROR: $*" >&2; exit 1; }

# Create a temp. dir.
tmpDir=$(mktemp -d -t XXXX) || die # Works on both macOS and Linux; note: dir. name will have random extension on macOS (e.g., '.../XXXX.bJViLcM3') and none on Linux (e.g., '.../vXDA')
trap 'rm -rf "$tmpDir"' EXIT # Set up exit trap to automatically clean up the temp dir.


# Prepend the tmp dir. to the $PATH
PATH="$tmpDir:$PATH"

for exe in n node npm; do

  exePath=$(command -v "$exe")
  if [[ -z $exePath ]]; then
    # Create dummy executable.
    cat >"$tmpDir/$exe" <<'EOF'
#!/bin/sh
echo 'v0.0.0'
EOF
    chmod +x "$tmpDir/$exe" || die
  fi

  stdErrOutput=$(N_PREFIX="$tmpDir/noSuch" n-install -t 2>&1 >/dev/null) && die "Unexpectedly didn't fail with a $exe binary already in the path."

  [[ $stdErrOutput =~ 'already'[[:space:]].*'PATH' ]] ||  die "Didn't fail with expected already-have-binary-in-path error message; stderr output was:"$'\n'"$stdErrOutput"

done

exit 0
